#!/usr/bin/env python
#coding=utf-8
import roslib;

roslib.load_manifest('robotiq_2f_gripper_control')
import rospy
from std_msgs.msg import String
import std_msgs
from robotiq_2f_gripper_control.msg import _Robotiq2FGripper_robot_input  as inputMsg
from takktile_ros.msg import Raw, Touch, Contact, Info
from std_srvs.srv import Empty
import os
import matplotlib.pyplot as plt
# import matplotlib.animation as animation
import time
import numpy as np



# cdict = {
#   'red'  :  ( (0.0, 0.25, .25), (0.02, .59, .59), (1., 1., 1.)),
#   'green':  ( (0.0, 0.0, 0.0), (0.02, .45, .45), (1., .97, .97)),
#   'blue' :  ( (0.0, 1.0, 1.0), (0.02, .75, .75), (1., 0.45, 0.45))
# }
#
# cm = m.colors.LinearSegmentedColormap('my_colormap', cdict, 1024)
#
#
#
#
# fig = plt.figure(1)
# # draw
# plt.imshow(data, interpolation='nearest', cmap=cm, origin='lower',vmin=-50, vmax=400)
#
# plt.xticks(())
# plt.yticks(())
# fig.canvas.update
full_data_filepath = '/home/wang/touth_classification/src/generate_dataset/dataset/79.4HA/79_4HA_fulldata_test_new'
k_filepath = '/home/wang/touth_classification/src/generate_dataset/dataset/79.4HA/79_4HA_k_test_new'
def text_save(filename, data):  #filename为写入CSV文件的路径，data为要写入数据列表.
    file = open(filename, 'a')
    for i in range(len(data)):
        s = str(int(data[i])).replace('[','').replace(']','')#去除[],这两行按数据不同，可以选择
        s = s+' '   #去除单引号，逗号，每行末尾追加换行符
        file.write(s)
    file.write('\n')
    file.close()
def takktile_zero():
    # helper python interface to be used elsewhere
    rospy.wait_for_service('/takktile/zero')
    try:
         zero = rospy.ServiceProxy('/takktile/zero', Empty)
         zero()
         return
    except rospy.ServiceException as e:
         print("Service call failed: %s"%e)
def printStatus(status):
    global pos
    pos = str(status.gPO)
    """Print the status string generated by the statusInterpreter function."""


def stability_test(initial_data):
    global pos
    global a
    a.data = str(int(pos) + 1)
    pub.publish(a)
    while pos!=a.data:
        cur_pos = rospy.wait_for_message("Robotiq2FGripperRobotInput", inputMsg.Robotiq2FGripper_robot_input)
    Touch_data = list(rospy.wait_for_message('takktile/calibrated', Touch, timeout=None).pressure)
    #机械臂上提1mm
    raw_input('上移')
    Touch_data_up = list(rospy.wait_for_message('takktile/calibrated', Touch, timeout=None).pressure)
    mean = [(Touch_data[i]-Touch_data_up[i]) for i in range(10)]
    mean_delta = [(Touch_data[i]-Touch_data_up[i])/(Touch_data[i]+0.000001) for i in range(10)]
    print('average contact data ',np.mean(Touch_data_up))
    if abs(np.mean(Touch_data_up))>3:
        print(Touch_data_up,Touch_data)
        print('delta precent ',mean_delta)

        for i in range(10):
            if abs(mean_delta[i]) >0.5 and abs(mean[i])>3:
                print('drop>0.5')
                return False
        return True
    else:
        return False




    pass
def contact_judge(initial_data,final_data):
    delta_list = [abs(final_data[i] - initial_data[i]) for i in range(10)]
    a = np.sum(np.array(delta_list))
    if a >50:
        return True
    return False

def listener():
    global a
    global counter
    global initial_pos
    global contact_or_not
    global pos

    raw_input('按ENTER释放夹爪.')
    contact_or_not = False
    a.data = '20'
    pub.publish(a)
    # cur_pos = rospy.wait_for_message("Robotiq2FGripperRobotInput", inputMsg.Robotiq2FGripper_robot_input)

    while pos!=a.data:
        cur_pos = rospy.wait_for_message("Robotiq2FGripperRobotInput", inputMsg.Robotiq2FGripper_robot_input)
    takktile_zero()
    a.data = str(input())
    pub.publish(a)
    # cur_pos = rospy.wait_for_message("Robotiq2FGripperRobotInput", inputMsg.Robotiq2FGripper_robot_input)

    while pos!=a.data:
        cur_pos = rospy.wait_for_message("Robotiq2FGripperRobotInput", inputMsg.Robotiq2FGripper_robot_input)
    takktile_zero()
    Touch_init = list(rospy.wait_for_message('takktile/calibrated', Touch, timeout=None).pressure)
    while contact_or_not is not True:
        # print(a.data)

        a.data = str(int(a.data)+1)
        pub.publish(a)
        # cur_pos = rospy.wait_for_message("Robotiq2FGripperRobotInput", inputMsg.Robotiq2FGripper_robot_input)
        while pos != a.data:
            cur_pos = rospy.wait_for_message("Robotiq2FGripperRobotInput", inputMsg.Robotiq2FGripper_robot_input)
        contact_touch = list(rospy.wait_for_message('takktile/calibrated', Touch, timeout=None).pressure)
        contact_or_not = contact_judge(Touch_init,contact_touch)
    print('contacted')
    stability = False


    #抓取稳定性分析
    while stability is False:
        stability = stability_test(contact_touch)
    print('stable')






# END CALLBACK
if __name__ == '__main__':
    # plt.show()
    # BEGIN SUBSCRIBER
    rospy.init_node('topic_subscriber')
    pub = rospy.Publisher('robotiq/out/command', std_msgs.msg.String,queue_size=1)
    rospy.Subscriber("Robotiq2FGripperRobotInput", inputMsg.Robotiq2FGripper_robot_input, printStatus)
    rospy.sleep(0.2)
    a = std_msgs.msg.String()
    a.data='a'
    counter = 1
    pub.publish(a)
    while 1:
        listener()


